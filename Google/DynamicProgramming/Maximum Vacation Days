  int maxVacationDays(vector<vector<int>>& flights, vector<vector<int>>& days) {
          int n = flights.size();
        if(n == 0) return 0;
        int k = days[0].size();
        
        vector<vector<int>> dp(n, vector<int>(k, -1));    
        
        for(int i = 0; i < n; ++i) //this will take care of staying in the same place
            flights[i][i] = 1;
        
        //initialize for week 0
        for(int i = 0 ; i < n; ++i)
            dp[i][0] = (flights[0][i]) ? days[i][0] : -1;
        
        
            
        for(int week = 1; week < k; ++week)
        {
            for(int curr = 0; curr < n; ++curr)
            { 
                for(int prev = 0; prev < n; ++prev)
                {
                    if(dp[prev][week - 1] == -1) //the city prev was unreachable in the prev week, so we shouldn't consider it
                        continue;
                    
                    if(flights[prev][curr]) //flight exists from prev to curr
                    {
                        int vacations = dp[prev][week - 1] + days[curr][week];
                        dp[curr][week] = std::max(dp[curr][week], vacations);
                    }
                }
            }
        }
        
        int maxm = 0;
        for(int i = 0; i < n; ++i)
            maxm = std::max(maxm, dp[i][k - 1]);
        
        return maxm;
    }
