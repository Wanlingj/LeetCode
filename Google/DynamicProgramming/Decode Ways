  int numDecodings(string s, unordered_map<string, int>& cache) {
        if (s.empty() || s.size() == 1 && s[0] != '0') return 1; // exit condition
        if (s[0]=='0') return 0;
        if (cache.count(s) != 0) return cache[s];  // memorization
        
        int result = 0;
        string prefix = "";
        for (int i = 0; i < s.size(); ++i) {
            prefix += string(1, s[i]);
            if (prefix.size() > 2) break;
            if (stoi(prefix) <= 26 && stoi(prefix) > 0) {
                result += numDecodings(s.substr(i+1), cache); // calculating subproblems
            }
        }
        cache[s] = result;   // memorization
        return result;
    }
    
    int numDecodings(string s) {
        unordered_map<string, int> cache;
        return numDecodings(s, cache);
    }
