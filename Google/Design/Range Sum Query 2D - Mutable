class NumMatrix {
  private:
    vector<vector<int>> bit;
    vector<vector<int>> _matrix;
    int m;
    int n;
    
    void updateBIT(int row, int col, int val) {
       row++;
        col++;
        // for (int i=row; i<bit.size(); i += i & (-i)) {
        //     for (int j=col; j<bit[0].size(); j += j & (-j)) {
                bit[row][col] = val;
        //     }
        // }
    }
    
    int getSum(int row, int col) {
        row++;
        col++;
        int sum = 0;
        for (int i=row; i>0; i -= 1) {
            for (int j=col; j>0; j -= 1) {
                sum += bit[i][j];
            }
        }
        
        return sum;
    }
    
public:
    NumMatrix(vector<vector<int>> matrix) {
        if (matrix.empty() || matrix[0].empty()) { return;}
        m = matrix.size();
        n = matrix[0].size();
        bit = vector<vector<int>>(m+1, vector<int>(n+1, 0));
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                updateBIT(i, j, matrix[i][j]);
            }
        }
    }
    
    void update(int row, int col, int val) {
        if (m == 0 || n == 0 || row < 0 || row >= m || col < 0 || col >= n) return;
        if (val != bit[row+1][col+1]) {
            updateBIT(row, col, val);
          
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        if (m == 0 || n == 0 || row1 < 0 || row1 >= m || col1 < 0 || col1 >= n
           || row2 < 0 || row2 >= m || col2 < 0 || col2 >= n) return 0;
        return getSum(row2, col2) + getSum(row1-1, col1-1) - getSum(row1-1, col2) - getSum(row2, col1-1);
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * obj->update(row,col,val);
 * int param_2 = obj->sumRegion(row1,col1,row2,col2);
 */
